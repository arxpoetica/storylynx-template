// TODO: throw this in an npm repository ???

// string
export const camelToKebab = str => str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase()
export const kebabToCamel = str => str.replace(/-([a-z])/g, $1 => $1[1].toUpperCase())
export const hyphenate = str => str.replace(/[^a-z0-9+]+/gi, ' ').trim().replace(/ /g, '-')
export const uid = len => [...Array(len || 20)].map(() => Math.random().toString(36).split('.')[1][0]).join('')

// object
// see: https://stackoverflow.com/questions/286141/remove-blank-attributes-from-an-object-in-javascript
export const cleanObject = obj => {
	for (const propName in obj) {
		if (obj[propName] === null) {
			delete obj[propName]
		}
	}
}
export const fastClone = obj => JSON.parse(JSON.stringify(obj)) // https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074

// array
export const unique = arr => arr.filter((value, index, self) => self.indexOf(value) === index)
export const range = (start, stop) => Array.from(new Array(stop - start + 1), (val, index) => index + start)

// maths
export const random = (lower, upper) => {
	// see: https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range
	lower = Math.ceil(lower)
	upper = Math.floor(upper)
	return Math.floor(Math.random() * (upper - lower + 1)) + lower
}

// date/time
import dayjs from 'dayjs'
export const randomTimestamp = () => dayjs()
	.set('date', random(0, 27))
	.set('month', random(0, 11))
	.set('year', random(2013, 2018))
	.set('hour', random(1, 24))
	.set('minute', random(0, 59))
	.set('second', random(0, 59))
export const datestamp = datetime => dayjs(datetime).format('MMMM DD, YYYY')
export const timestamp = datetime => dayjs(datetime).format('h:mma')
export const formattedstamp = datetime => dayjs(datetime).format('M.D.YYYY')

// measurements
export const bytesFormat = bytes => {
	var thresh = 1000
	if (Math.abs(bytes) < thresh) {
		return bytes + ' B'
	}
	var units = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	var unit = -1
	do {
		bytes /= thresh
		++unit
	} while (Math.abs(bytes) >= thresh && unit < units.length - 1)
	return Math.round(bytes) + ' ' + units[unit]
}

// links / urls
export const src = (asset, options = {}) => {
	if (asset) {
		let src = asset.url.split(asset.handle)[0]
		src += `resize=w:${options.width || '600'},h:${options.height || '600'}`
		src += options.crop ? ',fit:crop' : ''
		src += `/${asset.handle}`
		return src
	} else {
		return '/img/blank.jpg'
	}
}
export const alt = asset => asset.summary ? asset.summary : 'No description for this resource.'
